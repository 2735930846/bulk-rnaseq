# 安装并加载必要的包
# 如果没有安装这些包，请取消注释以下安装命令
#install.packages("lightgbm")
library(lightgbm)
library(caret)
library(pROC)
library(tibble)
library(ROCit)
library(ggplot2)
library(shapviz)

# 读取并准备数据
tpms_transposed <- read.table("MachineLearning.txt", sep = "\t", row.names = 1, check.names = FALSE, stringsAsFactors = FALSE, header = TRUE)
tpms_transposed <- tpms_transposed[, c("CDKN1C", "ADRA1A", "BCL2A1", "DPP4", "CACNA1B", "TFPI", "KCNA5", "CYB5A", "Label")]

# 读取数据
my_data <- tpms_transposed

# 查看数据结构
str(my_data)

# 确保最后一列是Label
if (!("Label" %in% colnames(my_data))) {
  stop("数据框中没有 'Label' 列，请检查数据。")
}

# 标准化特征数据（去除Label列）
features <- my_data[, -ncol(my_data)]
features <- scale(features)

# 将标准化后的数据和Label列组合成新的数据框
my_data_scaled <- data.frame(features, Label = my_data$Label)

# 划分训练集和测试集
set.seed(123)
inTrain <- createDataPartition(y = my_data_scaled$Label, p = 0.6, list = FALSE)
traindata <- my_data_scaled[inTrain, ]
testdata <- my_data_scaled[-inTrain, ]

# 特征名称
feature_names <- colnames(traindata)[-ncol(traindata)]

# 创建LightGBM数据集
dtrain <- lgb.Dataset(data = as.matrix(traindata[, feature_names]), label = traindata$Label)
dtest <- as.matrix(testdata[, feature_names])

# 设置LightGBM参数
params <- list(
  objective = "binary",
  metric = "auc",
  boosting_type = "gbdt",
  num_leaves = 31,
  learning_rate = 0.05,
  nrounds = 100
)

# 训练LightGBM模型
model_lgbm <- lgb.train(
  params = params,
  data = dtrain,
  nrounds = params$nrounds
)

# 生成训练集预测值
traindata$pred_lgbm <- predict(model_lgbm, as.matrix(traindata[, feature_names]))

# 计算训练集AUC
ROC_train_lgbm <- round(auc(response = traindata$Label, predictor = traindata$pred_lgbm), 4)
print(paste("Train AUC (LGBM - GBDT):", ROC_train_lgbm))

# 在测试集上生成预测值
testdata$pred_lgbm <- predict(model_lgbm, dtest)

# 计算测试集AUC
ROC_test_lgbm <- round(auc(response = testdata$Label, predictor = testdata$pred_lgbm), 4)
print(paste("Test AUC (LGBM - GBDT):", ROC_test_lgbm))

# 创建混淆矩阵并计算性能指标
predicted_classes_lgbm <- ifelse(testdata$pred_lgbm > 0.5, 1, 0)
confusion_matrix_lgbm <- confusionMatrix(as.factor(predicted_classes_lgbm), as.factor(testdata$Label))
print(confusion_matrix_lgbm)

# 提取准确率、召回率、特异性和F1分数
accuracy_lgbm <- confusion_matrix_lgbm$overall["Accuracy"]
recall_lgbm <- confusion_matrix_lgbm$byClass["Recall"]
specificity_lgbm <- confusion_matrix_lgbm$byClass["Specificity"]
f1_lgbm <- confusion_matrix_lgbm$byClass["F1"]

cat("准确率 (LGBM - GBDT):", accuracy_lgbm, "\n")
cat("召回率 (LGBM - GBDT):", recall_lgbm, "\n")
cat("特异性 (LGBM - GBDT):", specificity_lgbm, "\n")
cat("F1分数 (LGBM - GBDT):", f1_lgbm, "\n")

# 保存LGBM - GBDT的预测结果和实际值到CSV文件
write.csv(data.frame(Label = testdata$Label, Predicted = testdata$pred_lgbm), "lgbm_gbdt_predictions.csv", row.names = FALSE)

# 绘制LGBM - GBDT的ROC曲线
roc_obj_lgbm <- roc(testdata$Label, testdata$pred_lgbm)
plot(roc_obj_lgbm, main = "ROC Curve for LGBM (GBDT)", xlab = "False Positive Rate", ylab = "True Positive Rate", col = "blue", lwd = 2)
abline(a = 0, b = 1, lty = 2, col = "gray")

# 添加AUC值到图中
auc_value_lgbm <- auc(roc_obj_lgbm)
legend("bottomright", legend = paste("AUC =", round(auc_value_lgbm, 4)), col = "blue", lwd = 2)
