# 安装并加载必要的包
# 如果没有安装这些包，请取消注释以下安装命令
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
library(caret)
library(pROC)
library(tibble)
library(ROCit)
library(ggplot2)
library(shapviz)

# 读取并准备数据
tpms_transposed <- read.table("MachineLearning.txt", sep = "\t", row.names = 1, check.names = FALSE, stringsAsFactors = FALSE, header = TRUE)
tpms_transposed <- tpms_transposed[, c("CDKN1C", "ADRA1A", "BCL2A1", "DPP4", "CACNA1B", "TFPI", "KCNA5", "CYB5A", "Label")]

# 读取数据
my_data <- tpms_transposed

# 查看数据结构
str(my_data)

# 确保最后一列是Label
if (!("Label" %in% colnames(my_data))) {
  stop("数据框中没有 'Label' 列，请检查数据。")
}

# 标准化特征数据（去除Label列）
features <- my_data[, -ncol(my_data)]
features <- scale(features)

# 将标准化后的数据和Label列组合成新的数据框
my_data_scaled <- data.frame(features, Label = my_data$Label)

# 划分训练集和测试集
set.seed(123)
inTrain <- createDataPartition(y = my_data_scaled$Label, p = 0.5, list = FALSE)
traindata <- my_data_scaled[inTrain, ]
testdata <- my_data_scaled[-inTrain, ]

# 确保 Label 列为因子类型
traindata$Label <- as.factor(traindata$Label)
testdata$Label <- as.factor(testdata$Label)

# 使用决策树（Gini）进行分类
# 创建训练模型，设置复杂度参数 cp
model_dt_gini <- rpart(Label ~ ., data = traindata, method = "class", parms = list(split = "gini"), control = rpart.control(cp = 0.01))

# 生成训练集预测值
train_pred_dt_gini <- predict(model_dt_gini, traindata, type = "prob")
traindata$pred_dt_gini <- train_pred_dt_gini[,2]

# 计算训练集AUC
ROC_train_dt_gini <- round(auc(traindata$Label, traindata$pred_dt_gini), 4)
print(paste("Train AUC (Decision Tree - Gini):", ROC_train_dt_gini))

# 在测试集上生成预测值
test_pred_dt_gini <- predict(model_dt_gini, testdata, type = "prob")
testdata$pred_dt_gini <- test_pred_dt_gini[,2]

# 计算测试集AUC
ROC_test_dt_gini <- round(auc(testdata$Label, testdata$pred_dt_gini), 4)
print(paste("Test AUC (Decision Tree - Gini):", ROC_test_dt_gini))

# 创建混淆矩阵并计算性能指标
predicted_classes_dt_gini <- ifelse(testdata$pred_dt_gini > 0.5, 1, 0)
confusion_matrix_dt_gini <- confusionMatrix(as.factor(predicted_classes_dt_gini), testdata$Label)
print(confusion_matrix_dt_gini)

# 提取准确率、召回率、特异性和F1分数
accuracy_dt_gini <- confusion_matrix_dt_gini$overall["Accuracy"]
recall_dt_gini <- confusion_matrix_dt_gini$byClass["Recall"]
specificity_dt_gini <- confusion_matrix_dt_gini$byClass["Specificity"]
f1_dt_gini <- confusion_matrix_dt_gini$byClass["F1"]

cat("准确率 (Decision Tree - Gini):", accuracy_dt_gini, "\n")
cat("召回率 (Decision Tree - Gini):", recall_dt_gini, "\n")
cat("特异性 (Decision Tree - Gini):", specificity_dt_gini, "\n")
cat("F1分数 (Decision Tree - Gini):", f1_dt_gini, "\n")

# 保存决策树（Gini）的预测结果和实际值到 CSV 文件
write.csv(data.frame(Label = testdata$Label, Predicted = testdata$pred_dt_gini), "decisiontree_gini_predictions.csv", row.names = FALSE)

# 绘制决策树（Gini）的 ROC 曲线
roc_obj_dt_gini <- roc(testdata$Label, testdata$pred_dt_gini)
plot(roc_obj_dt_gini, main = "ROC Curve for Decision Tree (Gini)", xlab = "False Positive Rate", ylab = "True Positive Rate", col = "blue", lwd = 2)
abline(a = 0, b = 1, lty = 2, col = "gray")

# 添加 AUC 值到图中
auc_value_dt_gini <- auc(roc_obj_dt_gini)
legend("bottomright", legend = paste("AUC =", round(auc_value_dt_gini, 4)), col = "blue", lwd = 2)
